#!/usr/bin/env python3
"""
Test script to validate the dropdown menu implementation.
"""

import sys
import ast
from pathlib import Path

def test_dropdown_implementation():
    """Test that the dropdown menu implementation is correct."""
    print("Testing Dropdown Menu Implementation")
    print("=" * 50)
    
    try:
        # Read main.py content
        main_py_path = Path("main.py")
        if not main_py_path.exists():
            print("‚ùå main.py not found")
            return False
        
        content = main_py_path.read_text()
        
        # Test 1: Check that CTkOptionMenu is used instead of CTkButton
        print("\n1. Checking for Views dropdown menu...")
        if "views_menu = ctk.CTkOptionMenu(" in content:
            print("‚úÖ Views dropdown menu found")
        else:
            print("‚ùå Views dropdown menu not found")
            return False
        
        # Test 2: Check for dropdown values
        print("\n2. Checking dropdown menu values...")
        required_options = [
            "Select View...",
            "üìã List View", 
            "üìä Statistics",
            "üîç Search"
        ]
        
        all_found = True
        for option in required_options:
            if option in content:
                print(f"‚úÖ Option '{option}' found")
            else:
                print(f"‚ùå Option '{option}' missing")
                all_found = False
        
        if not all_found:
            return False
        
        # Test 3: Check for handler method
        print("\n3. Checking for handler method...")
        if "def handle_view_selection(self, selection):" in content:
            print("‚úÖ Handler method 'handle_view_selection' found")
        else:
            print("‚ùå Handler method missing")
            return False
        
        # Test 4: Check for statistics view method
        print("\n4. Checking for statistics view method...")
        if "def show_statistics_view(self):" in content:
            print("‚úÖ Statistics view method found")
        else:
            print("‚ùå Statistics view method missing")
            return False
        
        # Test 5: Check for search view method  
        print("\n5. Checking for search view method...")
        if "def show_search_view(self):" in content:
            print("‚úÖ Search view method found")
        else:
            print("‚ùå Search view method missing")
            return False
        
        # Test 6: Check that old button references are removed
        print("\n6. Checking for old button references...")
        if "list_view_btn" in content:
            print("‚ùå Old list_view_btn reference still exists")
            return False
        else:
            print("‚úÖ Old button references cleaned up")
        
        # Test 7: Check for state management
        print("\n7. Checking for dropdown state management...")
        if "views_menu.configure(state=" in content:
            print("‚úÖ Dropdown state management found")
        else:
            print("‚ùå Dropdown state management missing")
            return False
        
        # Test 8: Check for menu reset after action
        print("\n8. Checking for menu reset functionality...")
        if 'views_menu.set("Select View...")' in content:
            print("‚úÖ Menu reset functionality found")
        else:
            print("‚ùå Menu reset functionality missing")
            return False
        
        print("\n" + "=" * 50)
        print("‚úÖ ALL DROPDOWN TESTS PASSED!")
        print("\nImplementation Summary:")
        print("  ‚úÖ Replaced direct List View button with dropdown menu")
        print("  ‚úÖ Added comprehensive view options (List, Statistics, Search)")
        print("  ‚úÖ Implemented proper handler method with menu reset")
        print("  ‚úÖ Added Statistics dialog with dataset overview")
        print("  ‚úÖ Added Search placeholder for future functionality")
        print("  ‚úÖ Cleaned up old button references")
        print("  ‚úÖ Maintained proper state management")
        print("\nThe dropdown menu provides better organization and")
        print("room for additional view features while maintaining")
        print("all existing functionality.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test failed with error: {e}")
        return False

def main():
    """Run the dropdown implementation test."""
    success = test_dropdown_implementation()
    return 0 if success else 1

if __name__ == '__main__':
    sys.exit(main())